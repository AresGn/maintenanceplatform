#!/usr/bin/env python3
"""
Script pour cr√©er les tables manquantes et ins√©rer des donn√©es de maintenance r√©alistes
"""
import sys
import os
from datetime import datetime, timedelta, date
import random
from sqlalchemy import create_engine, text

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.config import settings

def execute_sql_file(engine, file_path):
    """Ex√©cuter un fichier SQL"""
    print(f"üìÑ Ex√©cution du fichier SQL: {file_path}")
    
    with open(file_path, 'r', encoding='utf-8') as file:
        sql_content = file.read()
    
    with engine.connect() as conn:
        # Ex√©cuter le SQL par blocs (s√©par√©s par des points-virgules)
        statements = [stmt.strip() for stmt in sql_content.split(';') if stmt.strip()]
        
        for statement in statements:
            if statement:
                try:
                    conn.execute(text(statement))
                    conn.commit()
                except Exception as e:
                    print(f"‚ö†Ô∏è  Erreur lors de l'ex√©cution: {e}")
                    print(f"Statement: {statement[:100]}...")

def insert_maintenance_data(engine):
    """Ins√©rer des donn√©es de maintenance r√©alistes"""
    print("üìä Insertion des donn√©es de maintenance...")
    
    with engine.connect() as conn:
        # R√©cup√©rer les √©quipements existants
        result = conn.execute(text("SELECT id, name FROM equipment ORDER BY id"))
        equipment_list = result.fetchall()
        
        if not equipment_list:
            print("‚ùå Aucun √©quipement trouv√©. Veuillez d'abord cr√©er des √©quipements.")
            return
        
        print(f"üè≠ {len(equipment_list)} √©quipements trouv√©s")
        
        # R√©cup√©rer les utilisateurs techniciens
        result = conn.execute(text("SELECT id, first_name, last_name FROM users WHERE role = 'technician'"))
        technicians = result.fetchall()
        
        result = conn.execute(text("SELECT id, first_name, last_name FROM users WHERE role = 'supervisor'"))
        supervisors = result.fetchall()
        
        print(f"üë• {len(technicians)} techniciens et {len(supervisors)} superviseurs trouv√©s")
        
        # 1. Cr√©er des plans de maintenance
        maintenance_plans_data = [
            {
                "name": "Maintenance pr√©ventive Robot de soudage",
                "description": "Maintenance pr√©ventive mensuelle du robot de soudage",
                "equipment_id": equipment_list[0][0],
                "maintenance_type": "preventive",
                "frequency_days": 30,
                "estimated_duration": 120,
                "priority": "high",
                "next_due_date": datetime.now() + timedelta(days=5)
            },
            {
                "name": "Inspection Convoyeur principal",
                "description": "Inspection hebdomadaire du convoyeur principal",
                "equipment_id": equipment_list[1][0],
                "maintenance_type": "preventive", 
                "frequency_days": 7,
                "estimated_duration": 45,
                "priority": "medium",
                "next_due_date": datetime.now() + timedelta(days=2)
            },
            {
                "name": "Maintenance Presse hydraulique",
                "description": "Maintenance trimestrielle de la presse hydraulique",
                "equipment_id": equipment_list[2][0],
                "maintenance_type": "preventive",
                "frequency_days": 90,
                "estimated_duration": 180,
                "priority": "critical",
                "next_due_date": datetime.now() + timedelta(days=15)
            }
        ]
        
        plan_ids = []
        for plan_data in maintenance_plans_data:
            result = conn.execute(text("""
                INSERT INTO maintenance_plans (name, description, equipment_id, maintenance_type, 
                                             frequency_days, estimated_duration, priority, next_due_date)
                VALUES (:name, :description, :equipment_id, :maintenance_type, 
                        :frequency_days, :estimated_duration, :priority, :next_due_date)
                RETURNING id
            """), plan_data)
            plan_id = result.fetchone()[0]
            plan_ids.append(plan_id)
            conn.commit()
        
        print(f"‚úÖ {len(plan_ids)} plans de maintenance cr√©√©s")
        
        # 2. Cr√©er des t√¢ches pour chaque plan
        tasks_data = [
            # T√¢ches pour Robot de soudage
            [
                {"name": "V√©rification des niveaux d'huile", "description": "Contr√¥ler et compl√©ter les niveaux d'huile hydraulique", "estimated_duration": 15, "order": 1},
                {"name": "Inspection des c√¢bles", "description": "V√©rifier l'√©tat des c√¢bles √©lectriques et de donn√©es", "estimated_duration": 20, "order": 2},
                {"name": "Test des mouvements", "description": "Effectuer un test complet des 6 axes", "estimated_duration": 30, "order": 3},
                {"name": "Nettoyage g√©n√©ral", "description": "Nettoyage complet du robot", "estimated_duration": 25, "order": 4, "is_mandatory": False},
                {"name": "Calibrage pr√©cision", "description": "V√©rification et ajustement de la pr√©cision", "estimated_duration": 30, "order": 5}
            ],
            # T√¢ches pour Convoyeur
            [
                {"name": "Inspection visuelle", "description": "Contr√¥le visuel de l'√©tat g√©n√©ral", "estimated_duration": 10, "order": 1},
                {"name": "V√©rification tension courroie", "description": "Contr√¥ler et ajuster la tension", "estimated_duration": 15, "order": 2},
                {"name": "Lubrification roulements", "description": "Lubrifier tous les points de graissage", "estimated_duration": 20, "order": 3}
            ],
            # T√¢ches pour Presse hydraulique
            [
                {"name": "Contr√¥le pression hydraulique", "description": "V√©rifier les pressions de fonctionnement", "estimated_duration": 30, "order": 1},
                {"name": "Inspection joints", "description": "Contr√¥ler l'√©tat des joints d'√©tanch√©it√©", "estimated_duration": 45, "order": 2},
                {"name": "Test s√©curit√©s", "description": "Test de tous les syst√®mes de s√©curit√©", "estimated_duration": 60, "order": 3},
                {"name": "Remplacement filtres", "description": "Changement des filtres hydrauliques", "estimated_duration": 45, "order": 4}
            ]
        ]
        
        task_count = 0
        for i, plan_id in enumerate(plan_ids):
            for task_data in tasks_data[i]:
                task_data["maintenance_plan_id"] = plan_id
                task_data.setdefault("is_mandatory", True)
                
                conn.execute(text("""
                    INSERT INTO maintenance_tasks (maintenance_plan_id, name, description, 
                                                 estimated_duration, "order", is_mandatory)
                    VALUES (:maintenance_plan_id, :name, :description, 
                            :estimated_duration, :order, :is_mandatory)
                """), task_data)
                task_count += 1
        
        conn.commit()
        print(f"‚úÖ {task_count} t√¢ches de maintenance cr√©√©es")
        
        # 3. Cr√©er des maintenances planifi√©es
        scheduled_data = []
        for plan_id in plan_ids:
            # Maintenance dans 2 jours
            scheduled_data.append({
                "maintenance_plan_id": plan_id,
                "equipment_id": equipment_list[plan_ids.index(plan_id)][0],
                "scheduled_date": datetime.now() + timedelta(days=2),
                "estimated_start_time": "08:00:00",
                "estimated_end_time": "10:00:00",
                "assigned_technician_id": random.choice(technicians)[0] if technicians else None,
                "status": "scheduled",
                "priority": "medium",
                "notes": f"Maintenance planifi√©e"
            })
            
            # Maintenance dans 1 semaine
            scheduled_data.append({
                "maintenance_plan_id": plan_id,
                "equipment_id": equipment_list[plan_ids.index(plan_id)][0],
                "scheduled_date": datetime.now() + timedelta(days=7),
                "estimated_start_time": "14:00:00",
                "estimated_end_time": "16:00:00",
                "assigned_technician_id": random.choice(technicians)[0] if technicians else None,
                "status": "scheduled",
                "priority": "medium"
            })
        
        for scheduled in scheduled_data:
            conn.execute(text("""
                INSERT INTO scheduled_maintenances (maintenance_plan_id, equipment_id, scheduled_date,
                                                  estimated_start_time, estimated_end_time, 
                                                  assigned_technician_id, status, priority, notes)
                VALUES (:maintenance_plan_id, :equipment_id, :scheduled_date,
                        :estimated_start_time, :estimated_end_time,
                        :assigned_technician_id, :status, :priority, :notes)
            """), scheduled)
        
        conn.commit()
        print(f"‚úÖ {len(scheduled_data)} maintenances planifi√©es cr√©√©es")
        
        # 4. Cr√©er quelques interventions d'exemple
        interventions_data = [
            {
                "equipment_id": equipment_list[0][0],
                "technician_id": technicians[0][0] if technicians else 1,
                "maintenance_type": "corrective",
                "status": "completed",
                "priority": "high",
                "scheduled_date": datetime.now() - timedelta(days=2),
                "actual_start_time": datetime.now() - timedelta(days=2, hours=2),
                "actual_end_time": datetime.now() - timedelta(days=2, hours=1),
                "description": "R√©paration suite √† dysfonctionnement du robot",
                "work_performed": "Remplacement du moteur de l'axe 3, recalibrage complet",
                "issues_found": "Usure pr√©matur√©e du moteur due √† surcharge",
                "recommendations": "R√©viser les param√®tres de charge maximale",
                "validated_by": supervisors[0][0] if supervisors else None,
                "validated_at": datetime.now() - timedelta(days=1),
                "validation_notes": "Intervention conforme, robot op√©rationnel",
                "labor_cost": 15000,  # 150‚Ç¨
                "parts_cost": 85000   # 850‚Ç¨
            },
            {
                "equipment_id": equipment_list[1][0],
                "technician_id": technicians[1][0] if len(technicians) > 1 else technicians[0][0],
                "maintenance_type": "preventive",
                "status": "in_progress",
                "priority": "medium",
                "scheduled_date": datetime.now(),
                "actual_start_time": datetime.now() - timedelta(hours=1),
                "description": "Maintenance pr√©ventive hebdomadaire du convoyeur",
                "work_performed": "Inspection en cours, lubrification effectu√©e"
            }
        ]
        
        intervention_ids = []
        for intervention_data in interventions_data:
            result = conn.execute(text("""
                INSERT INTO maintenance_interventions (equipment_id, technician_id, maintenance_type,
                                                     status, priority, scheduled_date, actual_start_time,
                                                     actual_end_time, description, work_performed,
                                                     issues_found, recommendations, validated_by,
                                                     validated_at, validation_notes, labor_cost, parts_cost)
                VALUES (:equipment_id, :technician_id, :maintenance_type, :status, :priority,
                        :scheduled_date, :actual_start_time, :actual_end_time, :description,
                        :work_performed, :issues_found, :recommendations, :validated_by,
                        :validated_at, :validation_notes, :labor_cost, :parts_cost)
                RETURNING id
            """), intervention_data)
            intervention_id = result.fetchone()[0]
            intervention_ids.append(intervention_id)
        
        conn.commit()
        print(f"‚úÖ {len(intervention_ids)} interventions cr√©√©es")
        
        print("\nüéâ Donn√©es de maintenance cr√©√©es avec succ√®s!")
        print(f"   ‚Ä¢ Plans de maintenance: {len(plan_ids)}")
        print(f"   ‚Ä¢ T√¢ches: {task_count}")
        print(f"   ‚Ä¢ Maintenances planifi√©es: {len(scheduled_data)}")
        print(f"   ‚Ä¢ Interventions: {len(intervention_ids)}")

def main():
    """Fonction principale"""
    print("üöÄ Configuration de la base de donn√©es de maintenance...")
    
    try:
        engine = create_engine(settings.DATABASE_URL)
        
        # 1. Cr√©er les tables manquantes
        sql_file_path = os.path.join(os.path.dirname(__file__), "create_missing_tables.sql")
        execute_sql_file(engine, sql_file_path)
        
        # 2. Ins√©rer les donn√©es de test
        insert_maintenance_data(engine)
        
        print("\n‚úÖ Configuration termin√©e avec succ√®s!")
        print("\nüîë Comptes de test disponibles:")
        print("   ‚Ä¢ admin / admin123 (Administrateur)")
        print("   ‚Ä¢ super1 / super123 (Superviseur)")
        print("   ‚Ä¢ tech1 / tech123 (Technicien)")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        raise

if __name__ == "__main__":
    main()
